package card;

import java.util.Collections;
import java.util.Optional;
import java.util.Stack;

/**
 * This class represents different decks used throughout the game;
 * note that the underlying deck structures are typically mutated/modified in-place.
 *
 * @param <C>: The specific type of cards contained in that deck. Normally, to
 * 			   make serialization easier, we "alias" the types generated by this
 * 			   type constructor (Deck<C>) - e.g. PersonalityDeck really is
 * 			   an alias for Deck<PersonalityCard>.
 * @author Team 10 - SOEN6441
 * @version 1.0
 */
public abstract class Deck<C extends Card> {

	/**
	 * The cards of the deck. This structure is mutated.
	 */
	protected Stack<C> cards;
	
	/**
	 *This method draws a card if the deck has any card at all.
	 * @return card
	 */

	public Optional<C> drawCard() {
		return !cards.isEmpty() ? Optional.of(cards.pop()) : Optional.empty();
	}
	
	/**
	 * This method shuffles the deck.
	 */
	public void shuffle() {
		Collections.shuffle(cards);
	}
	
	/**
	 * This method gets the number of cards in the deck.
	 * @return the number of cards in the deck.
	 */
	public int size() {
		return cards.size();
	}
	
	/**
	 * This Method puts all the cards in the deck and shuffle it.
	 */
	public abstract void populateDeck();
	
}
