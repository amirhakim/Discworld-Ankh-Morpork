package card;

import java.util.Collections;
import java.util.Optional;
import java.util.Stack;

/**
 * <b>This class represents different decks used throughout the game;
 * note that the underlying deck structures are typically mutated/modified in-place.</b>
 *
 * @param <C>: The specific type of cards contained in that deck. Normally, to
 * 			   make serialization easier, we "alias" the types generated by this
 * 			   type constructor (Deck<C>) - e.g. PersonalityDeck really is
 * 			   an alias for a Deck&lt;PersonalityCard&gt;.
 * 
 * @author Team 10 - SOEN6441
 * @version 2.0
 */
public abstract class Deck<C extends Card> {

	/**
	 * <b>The cards of the deck. This structure is mutated. Note that since we
	 * intend to call {{@link #shuffle()} on the deck, we are using a Stack
	 * for convenience instead of a Deque implementation.</b>
	 */
	protected Stack<C> cards;
	
	/**
	 * <b>Draws a card if the deck has any card at all.</b>
	 * @return card
	 */
	public Optional<C> drawCard() {
		return !cards.isEmpty() ? Optional.of(cards.pop()) : Optional.empty();
	}
	
	/**
	 * <b>Puts card into the deck.</b>
	 */
	public void putCardOnTop() {
		
	}
	
	/**
	 * <b>Shuffles the deck.</b>
	 */
	public void shuffle() {
		Collections.shuffle(cards);
	}
	
	/**
	 * <b>Gets the number of cards in the deck.</b>
	 * @return the number of cards in the deck.
	 */
	public int size() {
		return cards.size();
	}
	
	/**
	 * <b>Puts all the cards of the applicable type (e.g. Green player cards) 
	 * in the deck and shuffles it.</b>
	 */
	public abstract void populateDeck();
	
}
